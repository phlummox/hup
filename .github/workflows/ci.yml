
name: build-test

on:
  pull_request:
    paths-ignore:
      - '**.md'
  push:
    paths-ignore:
      - '**.md'

jobs:
  cabal_build:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macOS-latest, windows-latest]
        cabal: ["3.6"]
        ghc:
          - "8.2.2"
          - "8.6.5"
          # see <https://github.com/phlummox/hup/issues/7> --
          # more recent versions of GHC won't work (until
          # Shelly is fixed)

    steps:
    - uses: actions/checkout@v2
      name: Check out code

    - uses: haskell/actions/setup@v1.2
      name: Setup Haskell
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - uses: actions/cache@v2
      name: Cache ~/.cabal/store
      with:
        # oft-given path of ~/.cabal/store is WRONG on windows.
        # see https://markkarpov.com/post/github-actions-for-haskell-ci.html
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal-${{ hashFiles('cabal.project.freeze*') }}-${{github.ref_name}}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-cabal-${{ hashFiles('cabal.project.freeze*') }}
          ${{ runner.os }}-${{ matrix.ghc }}-cabal
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle

    - name: Display environment info
      if: runner.os != 'Windows'
      run: |
        set -x
        echo github ref name ${{github.ref_name}}
        echo cabal store: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        ls -alt
        cabal --version
        ghc --version
        ls -alt ${{ steps.setup-haskell-cabal.outputs.cabal-store }}

    - name: Display environment info
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo github ref name ${{github.ref_name}}
        echo cabal store: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        dir /n /a
        cabal --version
        ghc --version
        dir /n /a ${{ steps.setup-haskell-cabal.outputs.cabal-store }}


    - name: Install dependencies
      run: |
        cabal v2-update
        cabal v2-build --dependencies-only --reorder-goals --max-backjumps=-1 --minimize-conflict-set

    - name: Build
      run: |
        cabal v2-clean
        cabal v2-build  --reorder-goals --max-backjumps=-1 --minimize-conflict-set

    - name: Documentation
      run: |
        cabal v2-haddock

    #- name: Tests
    #  run: |
    #    cabal v2-build --dependencies-only --enable-tests --enable-benchmarks --reorder-goals --max-backjumps=-1 --minimize-conflict-set --flags "EnableWebTests"
    #    cabal v2-test --enable-tests --flags "EnableWebTests"

    - name: Freeze dependencies
      shell: bash
      run: |
        cabal v2-freeze --enable-tests --enable-benchmarks --reorder-goals --max-backjumps=-1  --flags "EnableWebTests"
        mv cabal.project.freeze cabal.project.freeze.${{ runner.os }}-${{ matrix.ghc }}

    - name: Archive dependencies
      uses: actions/upload-artifact@v2
      with:
        name: cabal-project-freeze
        path: cabal.project.freeze.${{ runner.os }}-${{ matrix.ghc }}

    - name: Archive executable
      if: runner.os != 'Windows'
      run: |
        set -x
        ls -alt
        echo dist-newstyle conts
        ls -alt dist-newstyle

    - name: Archive executable
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        dir /n /a
        echo dist-newstyle conts
        dir /n /a dist-newstyle

    - name: Copy executable to cwd
      shell: bash
      run: |
        set -x
        export artifact_dir="hup-cabal-${{ runner.os }}-${{ matrix.ghc }}"
        mkdir -p "$artifact_dir"
        cabal v2-install --installdir="$artifact_dir" --install-method=copy

    - name: Archive executable
      uses: actions/upload-artifact@v2
      with:
        name: hup-binary
        path: hup-cabal-${{ runner.os }}-${{ matrix.ghc }}

  stack_build:
    name: ${{ matrix.os }}/ ${{ matrix.lts }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macOS-latest, windows-latest]
        lts: ["lts-11", "lts-14"]
        # note that lts >= 15 suffer from the same problem as GHC, above --
        # see <https://github.com/phlummox/hup/issues/7>.

    steps:
    - uses: actions/checkout@v2
      name: Check out code

    - uses: haskell/actions/setup@v1.2
      name: Setup Stack
      id: setup-haskell-stack
      with:
        ghc-version: "8.6.5"
        cabal-version: "3.6"
        enable-stack: true
        stack-version: "latest"

    - uses: actions/cache@v1
      name: Cache ~/.stack
      with:
        key: ${{ runner.os }}-${{ matrix.lts }}-stack-${{ hashFiles('stack-*yaml.lock') }}-${{github.ref_name}}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.lts }}-stack-${{ hashFiles('stack-*yaml.lock') }}
          ${{ runner.os }}-${{ matrix.lts }}-stack
        path: |
          ${{ steps.setup-haskell-stack.outputs.stack-root }}

    - name: Display environment info
      if: runner.os != 'Windows'
      run: |
        set -x
        echo github ref name ${{github.ref_name}}
        echo stack root ${{ steps.setup-haskell-stack.outputs.stack-root }}
        ls -alt
        stack --version
        ls -alt ${{ steps.setup-haskell-stack.outputs.stack-root }}

    - name: Display environment info
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        echo github ref name ${{github.ref_name}}
        echo stack root ${{ steps.setup-haskell-stack.outputs.stack-root }}
        dir /n /a
        stack --version
        dir /n /a ${{ steps.setup-haskell-stack.outputs.stack-root }}


    # see https://github.com/phlummox/hup/issues/8
    - name: Clear setup-exe-cache directory
      if: runner.os == 'macOS'
      run: rm -rf ${{ steps.setup-haskell-stack.outputs.stack-root }}/setup-exe-cache

    - name: Install dependencies
      run: |
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --dry-run --dependencies-only
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --fast --dependencies-only

    - name: Build
      run: |
        stack --stack-yaml=stack-${{ matrix.lts }}.yaml build

    - name: Test
      run: |
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --dry-run --test --dependencies-only --flag hup:EnableWebTests
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --test --dependencies-only --no-run-tests --flag hup:EnableWebTests
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --test --no-run-tests --flag hup:EnableWebTests
        stack build --stack-yaml=stack-${{ matrix.lts }}.yaml --test --flag hup:EnableWebTests

    - name: Copy executable to cwd
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -x
        export artifact_dir="hup-stack-${{ runner.os }}-${{ matrix.lts }}"
        mkdir $artifact_dir
        stack --stack-yaml=stack-${{ matrix.lts }}.yaml --local-bin-path "$artifact_dir" \
          build --copy-bins

    - name: Archive executable
      uses: actions/upload-artifact@v2
      with:
        name: hup-binary
        path: hup-stack-${{ runner.os }}-${{ matrix.lts }}



